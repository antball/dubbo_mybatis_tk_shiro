<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd 
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	<!-- 配置数据源 ，dbcp -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		initialSize: 初始化连接
		<property name="initialSize" value="5" />
		maxIdle: 最大空闲连接
		<property name="maxIdle" value="10" />
		minIdle: 最小空闲连接
		<property name="minIdle" value="5" />
		maxActive: 最大连接数量
		<property name="maxActive" value="15" />

		removeAbandoned: 是否自动回收超时连接
		<property name="removeAbandoned" value="true" />
		removeAbandonedTimeout: 超时时间(以秒数为单位)
		<property name="removeAbandonedTimeout" value="180" />
		maxWait: 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒
		<property name="maxWait" value="3000" />
		在空闲连接回收器执行周期(毫秒)
		<property name="timeBetweenEvictionRunsMillis" value="10000" />
		在每次空闲连接回收器线程(如果有)运行时检查的连接数量
		<property name="numTestsPerEvictionRun" value="10" />
		最小空闲时间
		<property name="minEvictableIdleTimeMillis" value="10000" />
		验证链接是否有效的sql语句
		<property name="validationQuery" value="select 1" />
		获取链接之前是否测试链接的可用性
		<property name="testOnBorrow" value="true" />
	</bean> -->

	<!--<bean id="abstractDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
		<property name="maxWait" value="60000"/>
		&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
		<property name="minEvictableIdleTimeMillis" value="300000"/>
		<property name="validationQuery" value="SELECT 'x'"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
		<property name="poolPreparedStatements" value="true"/>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
		<property name="filters" value="config"/>
		<property name="connectionProperties" value="config.decrypt=true" />
	</bean>

	<bean id="dataSourceRead1" parent="abstractDataSource">
		&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;
		<property name="url" value="${read1.jdbc.url}"/>
		<property name="username" value="${read1.jdbc.user}"/>
		<property name="password" value="${read1.jdbc.password}"/>
		&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
		<property name="initialSize" value="${read1.jdbc.initPoolSize}"/>
		<property name="minIdle" value="${read1.jdbc.minPoolSize}"/>
		<property name="maxActive" value="${read1.jdbc.maxPoolSize}"/>
	</bean>

	<bean id="dataSourceRead2" parent="abstractDataSource">
		&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;
		<property name="url" value="${read2.jdbc.url}"/>
		<property name="username" value="${read2.jdbc.user}"/>
		<property name="password" value="${read2.jdbc.password}"/>
		&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
		<property name="initialSize" value="${read2.jdbc.initPoolSize}"/>
		<property name="minIdle" value="${read2.jdbc.minPoolSize}"/>
		<property name="maxActive" value="${read2.jdbc.maxPoolSize}"/>
	</bean>

	<bean id="dataSourceWrite" parent="abstractDataSource">
		&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;
		<property name="url" value="${write.jdbc.url}"/>
		<property name="username" value="${write.jdbc.user}"/>
		<property name="password" value="${write.jdbc.password}"/>
		&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
		<property name="initialSize" value="${write.jdbc.initPoolSize}"/>
		<property name="minIdle" value="${write.jdbc.minPoolSize}"/>
		<property name="maxActive" value="${write.jdbc.maxPoolSize}"/>
	</bean>


	<bean id="dataSource2" class="com.juren.test.common.DynamicDataSource">
		<property name="writeDataSource" ref="dataSourceWrite" />
		<property name="readDataSource">
			<list>
				<ref bean="dataSourceRead1" />
				<ref bean="dataSourceRead2" />
			</list>
		</property>
		&lt;!&ndash;轮询方式&ndash;&gt;
		&lt;!&ndash;<property name="readDataSourcePollPattern" value="1" />
		<property name="defaultTargetDataSource" ref="dataSourceWrite"/>&ndash;&gt;
	</bean>-->




	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性driverClassName、 url、user、password -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
		<property name="initialSize" value="2" />
		<property name="minIdle" value="2" />
		<property name="maxActive" value="30" />
		<property name="testWhileIdle" value="false" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="5000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		
		<!-- 解密密码必须要配置的项 -->
		<!-- <property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=true" /> -->
	</bean>
	

	<!-- sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<!-- <property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" /> -->
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value>
							helperDialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
		<!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 -->

	<!-- mapper扫描器 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.juren.test.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
        -->
	</bean>
</beans>